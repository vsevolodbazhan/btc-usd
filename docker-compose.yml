version: "3"

x-common:
  &common
  env_file:
    - .env
  build:
    context: .
    args:
      - IMAGE=${AIRFLOW_IMAGE}
      - UID=${AIRFLOW_UID}
      - GID=${AIRFLOW_GID}
  volumes:
    - ${AIRFLOW_DAGS_DIRECTORY}:/opt/airflow/dags
    - ${AIRFLOW_LOGS_DIRECTORY}:/opt/airflow/logs
    - ${AIRFLOW_PLUGINS_DIRECTORY}:/opt/airflow/plugins
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  depends_on:
    &common-depends-on
    backend:
      condition: service_healthy

services:
  storage:
    env_file:
      - .env
    image: ${STORAGE_IMAGE}
    ports:
      - ${STORAGE_PORT}:5432
    environment:
      - POSTGRES_USER=${STORAGE_USER}
      - POSTGRES_PASSWORD=${STORAGE_PASSWORD}
    volumes:
      - storage:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--port",
          "${STORAGE_PORT}",
          "--username",
          "${STORAGE_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  backend:
    env_file:
      - .env
    image: ${BACKEND_IMAGE}
    ports:
      - ${BACKEND_PORT}:5432
    environment:
      - POSTGRES_USER=${BACKEND_USER}
      - POSTGRES_PASSWORD=${BACKEND_PASSWORD}
      - POSTGRES_DB=${BACKEND_DB}
    volumes:
      - backend:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--port",
          "${BACKEND_PORT}",
          "--username",
          "${BACKEND_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  webserver:
    <<: *common
    command: webserver
    ports:
      - ${AIRFLOW_PORT}:${AIRFLOW_PORT}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:${AIRFLOW_PORT}/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *common-depends-on
      init:
        condition: service_completed_successfully

  scheduler:
    <<: *common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *common-depends-on
      init:
        condition: service_completed_successfully

  init:
    <<: *common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.1.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID and AIRFLOW_GID environment variables, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:${AIRFLOW_GID}" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    user: "0:${AIRFLOW_GID}"
    volumes:
      - .:/sources

  cli:
    <<: *common
    profiles:
      - debug
    # Workaround for entrypoint issue.
    # https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

volumes:
  storage:
  backend:
